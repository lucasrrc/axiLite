// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axil_macc_axil_macc,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.885000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=221,HLS_SYN_LUT=426,HLS_VERSION=2023_2}" *)

module axil_macc (
        ap_clk,
        ap_rst_n,
        s_axi_BUS1_AWVALID,
        s_axi_BUS1_AWREADY,
        s_axi_BUS1_AWADDR,
        s_axi_BUS1_WVALID,
        s_axi_BUS1_WREADY,
        s_axi_BUS1_WDATA,
        s_axi_BUS1_WSTRB,
        s_axi_BUS1_ARVALID,
        s_axi_BUS1_ARREADY,
        s_axi_BUS1_ARADDR,
        s_axi_BUS1_RVALID,
        s_axi_BUS1_RREADY,
        s_axi_BUS1_RDATA,
        s_axi_BUS1_RRESP,
        s_axi_BUS1_BVALID,
        s_axi_BUS1_BREADY,
        s_axi_BUS1_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 1'd1;
parameter    C_S_AXI_BUS1_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS1_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS1_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_BUS1_AWVALID;
output   s_axi_BUS1_AWREADY;
input  [C_S_AXI_BUS1_ADDR_WIDTH - 1:0] s_axi_BUS1_AWADDR;
input   s_axi_BUS1_WVALID;
output   s_axi_BUS1_WREADY;
input  [C_S_AXI_BUS1_DATA_WIDTH - 1:0] s_axi_BUS1_WDATA;
input  [C_S_AXI_BUS1_WSTRB_WIDTH - 1:0] s_axi_BUS1_WSTRB;
input   s_axi_BUS1_ARVALID;
output   s_axi_BUS1_ARREADY;
input  [C_S_AXI_BUS1_ADDR_WIDTH - 1:0] s_axi_BUS1_ARADDR;
output   s_axi_BUS1_RVALID;
input   s_axi_BUS1_RREADY;
output  [C_S_AXI_BUS1_DATA_WIDTH - 1:0] s_axi_BUS1_RDATA;
output  [1:0] s_axi_BUS1_RRESP;
output   s_axi_BUS1_BVALID;
input   s_axi_BUS1_BREADY;
output  [1:0] s_axi_BUS1_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire  signed [31:0] a;
wire  signed [31:0] b;
wire   [31:0] c;
reg    c_ap_vld;
wire   [31:0] instr;
reg   [31:0] regc;
wire   [31:0] select_ln14_fu_89_p3;
wire   [0:0] icmp_ln14_fu_73_p2;
wire   [31:0] mul_fu_67_p2;
wire   [31:0] add_ln18_fu_83_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 regc = 32'd0;
end

axil_macc_BUS1_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS1_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS1_DATA_WIDTH ))
BUS1_s_axi_U(
    .AWVALID(s_axi_BUS1_AWVALID),
    .AWREADY(s_axi_BUS1_AWREADY),
    .AWADDR(s_axi_BUS1_AWADDR),
    .WVALID(s_axi_BUS1_WVALID),
    .WREADY(s_axi_BUS1_WREADY),
    .WDATA(s_axi_BUS1_WDATA),
    .WSTRB(s_axi_BUS1_WSTRB),
    .ARVALID(s_axi_BUS1_ARVALID),
    .ARREADY(s_axi_BUS1_ARREADY),
    .ARADDR(s_axi_BUS1_ARADDR),
    .RVALID(s_axi_BUS1_RVALID),
    .RREADY(s_axi_BUS1_RREADY),
    .RDATA(s_axi_BUS1_RDATA),
    .RRESP(s_axi_BUS1_RRESP),
    .BVALID(s_axi_BUS1_BVALID),
    .BREADY(s_axi_BUS1_BREADY),
    .BRESP(s_axi_BUS1_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a(a),
    .b(b),
    .c(c),
    .c_ap_vld(c_ap_vld),
    .instr(instr),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

axil_macc_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(b),
    .din1(a),
    .dout(mul_fu_67_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        regc <= select_ln14_fu_89_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_ap_vld = 1'b1;
    end else begin
        c_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_83_p2 = (regc + mul_fu_67_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c = ((icmp_ln14_fu_73_p2[0:0] == 1'b1) ? mul_fu_67_p2 : add_ln18_fu_83_p2);

assign icmp_ln14_fu_73_p2 = ((instr == 32'd0) ? 1'b1 : 1'b0);

assign select_ln14_fu_89_p3 = ((icmp_ln14_fu_73_p2[0:0] == 1'b1) ? mul_fu_67_p2 : add_ln18_fu_83_p2);

endmodule //axil_macc

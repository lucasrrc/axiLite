-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axil_macc is
generic (
    C_S_AXI_BUS1_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_BUS1_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_BUS1_AWVALID : IN STD_LOGIC;
    s_axi_BUS1_AWREADY : OUT STD_LOGIC;
    s_axi_BUS1_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_WVALID : IN STD_LOGIC;
    s_axi_BUS1_WREADY : OUT STD_LOGIC;
    s_axi_BUS1_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS1_ARVALID : IN STD_LOGIC;
    s_axi_BUS1_ARREADY : OUT STD_LOGIC;
    s_axi_BUS1_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_RVALID : OUT STD_LOGIC;
    s_axi_BUS1_RREADY : IN STD_LOGIC;
    s_axi_BUS1_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS1_BVALID : OUT STD_LOGIC;
    s_axi_BUS1_BREADY : IN STD_LOGIC;
    s_axi_BUS1_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axil_macc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axil_macc_axil_macc,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.885000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=221,HLS_SYN_LUT=426,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal c : STD_LOGIC_VECTOR (31 downto 0);
    signal c_ap_vld : STD_LOGIC;
    signal instr : STD_LOGIC_VECTOR (31 downto 0);
    signal regc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln14_fu_89_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_fu_73_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_fu_67_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_fu_83_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component axil_macc_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axil_macc_BUS1_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        c : IN STD_LOGIC_VECTOR (31 downto 0);
        c_ap_vld : IN STD_LOGIC;
        instr : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    BUS1_s_axi_U : component axil_macc_BUS1_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS1_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS1_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS1_AWVALID,
        AWREADY => s_axi_BUS1_AWREADY,
        AWADDR => s_axi_BUS1_AWADDR,
        WVALID => s_axi_BUS1_WVALID,
        WREADY => s_axi_BUS1_WREADY,
        WDATA => s_axi_BUS1_WDATA,
        WSTRB => s_axi_BUS1_WSTRB,
        ARVALID => s_axi_BUS1_ARVALID,
        ARREADY => s_axi_BUS1_ARREADY,
        ARADDR => s_axi_BUS1_ARADDR,
        RVALID => s_axi_BUS1_RVALID,
        RREADY => s_axi_BUS1_RREADY,
        RDATA => s_axi_BUS1_RDATA,
        RRESP => s_axi_BUS1_RRESP,
        BVALID => s_axi_BUS1_BVALID,
        BREADY => s_axi_BUS1_BREADY,
        BRESP => s_axi_BUS1_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        a => a,
        b => b,
        c => c,
        c_ap_vld => c_ap_vld,
        instr => instr,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_32s_32s_32_1_1_U1 : component axil_macc_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b,
        din1 => a,
        dout => mul_fu_67_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                regc <= select_ln14_fu_89_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln18_fu_83_p2 <= std_logic_vector(unsigned(regc) + unsigned(mul_fu_67_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c <= 
        mul_fu_67_p2 when (icmp_ln14_fu_73_p2(0) = '1') else 
        add_ln18_fu_83_p2;

    c_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_ap_vld <= ap_const_logic_1;
        else 
            c_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln14_fu_73_p2 <= "1" when (instr = ap_const_lv32_0) else "0";
    select_ln14_fu_89_p3 <= 
        mul_fu_67_p2 when (icmp_ln14_fu_73_p2(0) = '1') else 
        add_ln18_fu_83_p2;
end behav;
